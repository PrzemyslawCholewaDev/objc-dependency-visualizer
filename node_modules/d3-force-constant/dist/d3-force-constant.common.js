'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var accessorFn = _interopDefault(require('accessor-fn'));
var Kapsule = _interopDefault(require('kapsule'));

var constantForce = Kapsule({
  props: {
    strength: { default: 1 }, // accessor: number > 0
    direction: { default: 90 }, // accessor: angle in degrees (0: right, 90: down (svg coords))
    zAngle: { default: 0 // accessor: angle with the 2-dimensional xy plane in degrees (positive: close, negative: far (WebGL coords)). Values of -90/90 cancel motion in xy plane. Values above 90 inverse direction.
    } },
  methods: {
    initialize: function initialize(state, nodes) {
      var numDimensions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
      // called by engine to pass node objects and numDimensions
      state.nodes = nodes;
      state.nDim = numDimensions;
    }
  },
  init: function init(alpha, state) {
    // called at each tick

    var strength = accessorFn(state.strength);
    var direction = accessorFn(state.direction);
    var zAngle = accessorFn(state.zAngle);

    state.nodes.forEach(function (node) {
      var _polar2Cart = polar2Cart(alpha * strength(node), zAngle(node)),
          xydv = _polar2Cart.x,
          zdv = _polar2Cart.y;

      var _polar2Cart2 = polar2Cart(xydv, direction(node)),
          xdv = _polar2Cart2.x,
          ydv = _polar2Cart2.y;

      node.vx += xdv;
      if (state.nDim > 1) node.vy += ydv;
      if (state.nDim > 2) node.vz += zdv;
    });

    //

    function polar2Cart(d, a) {
      var rad = deg2rad(a);
      return {
        x: d * Math.cos(rad),
        y: d * Math.sin(rad)
      };

      //

      function deg2rad(deg) {
        return deg * Math.PI / 180;
      }
    }
  }
});

module.exports = constantForce;
